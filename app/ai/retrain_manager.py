# app/ai/retrain_manager.py
import threading
import pandas as pd
from pathlib import Path
from app.models.retrain_model import retrain_with_new_data
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
NEW_CONFIDENT_PATH = Path("data/new_confident.csv")
RETRAIN_THRESHOLD = 10  # —Å–∫–æ–ª—å–∫–æ confident –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
LOCK = threading.Lock()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
logger = logging.getLogger(__name__)


def append_confident_ad(description: str, category_id: int):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç confident –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä CSV.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
    """
    try:
        logger.info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        NEW_CONFIDENT_PATH.parent.mkdir(parents=True, exist_ok=True)

        if NEW_CONFIDENT_PATH.exists():
            df = pd.read_csv(NEW_CONFIDENT_PATH)
            logger.info(f"CSV –Ω–∞–π–¥–µ–Ω, —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        else:
            df = pd.DataFrame(columns=["description", "category_id"])
            logger.info("CSV –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DataFrame")

        new_row = pd.DataFrame([{"description": description, "category_id": category_id}])
        df = pd.concat([df, new_row], ignore_index=True)
        df.to_csv(NEW_CONFIDENT_PATH, index=False)
        count = len(df)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ confident –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ({count}/{RETRAIN_THRESHOLD})")
        return count

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ confident –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
        return 0


def trigger_retrain_if_needed():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ confident –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è.
    –ï—Å–ª–∏ –¥–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    try:
        if not NEW_CONFIDENT_PATH.exists():
            logger.info("CSV —Å confident –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è...")
            return

        df = pd.read_csv(NEW_CONFIDENT_PATH)
        count = len(df)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞: {count}/{RETRAIN_THRESHOLD}")

        if count < RETRAIN_THRESHOLD:
            logger.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è")
            return

        # –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å API
        def retrain_thread():
            try:
                logger.info("üöÄ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
                retrain_with_new_data(str(NEW_CONFIDENT_PATH))
                logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
                NEW_CONFIDENT_PATH.unlink(missing_ok=True)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏: {e}", exc_info=True)

        with LOCK:  # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            t = threading.Thread(target=retrain_thread, daemon=True)
            t.start()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è retrain: {e}", exc_info=True)
